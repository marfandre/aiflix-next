// app/upload/page.tsx  (–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç)
'use client'

import { useState } from 'react'

export default function UploadPage() {
  const [title, setTitle] = useState('')            // –±—ã–ª–æ: 'Untitled'
  const [description, setDescription] = useState('')
  const [file, setFile] = useState<File | null>(null)
  const [msg, setMsg] = useState<string>('')

  async function handleUpload() {
    if (!file) { setMsg('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'); return }

    setMsg('–°–æ–∑–¥–∞—ë–º upload –≤ Mux‚Ä¶')

    // 1) —Å—Ç–∞—Ä—Ç—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: —Å–æ–∑–¥–∞–¥–∏–º upload –≤ Mux –∏ —Å—Ç—Ä–æ–∫—É –≤ films
    const start = await fetch('/api/videos/start', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ title: title || undefined, description })
    }).then(r => r.json())

    if (start.error) { setMsg('–û—à–∏–±–∫–∞: ' + start.error); return }

    const { film_id, upload_url } = start

    // 2) –∑–∞–ª–∏–≤–∞–µ–º —Å–∞–º —Ñ–∞–π–ª –≤ Mux (PUT)
    setMsg('–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Mux‚Ä¶')
    const put = await fetch(upload_url, {
      method: 'PUT',
      headers: { 'Content-Type': file.type || 'application/octet-stream' },
      body: file
    })
    if (!put.ok) { setMsg('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Mux: ' + put.status); return }

    // 3) –∂–¥—ë–º playback_id –ø–æ film_id ‚Äî –ü–£–õ–õ–ò–ù–ì
    setMsg('–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Mux‚Ä¶ –∂–¥—ë–º playback_id')

    const ok = await waitForPlaybackIdByFilmId(film_id)
    setMsg(ok ? '–ì–æ—Ç–æ–≤–æ! üé¨' : '–ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å playback_id –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è')
  }

  return (
    <div className="max-w-3xl mx-auto space-y-4">
      <h1 className="text-2xl font-semibold">–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ</h1>

      <input
        value={title}
        onChange={e => setTitle(e.target.value)}
        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
        className="border p-2 w-full"
      />

      <textarea
        value={description}
        onChange={e => setDescription(e.target.value)}
        placeholder="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        className="border p-2 w-full h-32"
      />

      <input
        type="file"
        accept="video/*"
        onChange={e => setFile(e.target.files?.[0] ?? null)}
      />

      <button
        onClick={handleUpload}
        disabled={!file}
        className="px-4 py-2 bg-black text-white rounded disabled:opacity-50"
      >
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å
      </button>

      <div className="text-sm text-gray-600">{msg}</div>
    </div>
  )
}

async function waitForPlaybackIdByFilmId(filmId: string) {
  // –æ–ø—Ä–∞—à–∏–≤–∞–µ–º API –ø–æ id —Å—Ç—Ä–æ–∫–∏ –≤ films (–∞ –Ω–µ –ø–æ upload_id)
  for (let i = 0; i < 90; i++) {            // ~3 –º–∏–Ω, —à–∞–≥ 2 —Å–µ–∫
    await new Promise(r => setTimeout(r, 2000))
    const res = await fetch(`/api/films?id=${filmId}`).then(r => r.json())
    const f = res.films?.[0]
    if (f?.playback_id) return true
  }
  return false
}
